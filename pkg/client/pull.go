package client

import (
	"errors"
	"fmt"
	"path/filepath"

	"kcl-lang.io/kpm/pkg/downloader"
	pkg "kcl-lang.io/kpm/pkg/package"
	"kcl-lang.io/kpm/pkg/reporter"
)

// The PullOptions struct contains the options for pulling a package from the registry.
type PullOptions struct {
	// Source is the source of the package to be pulled.
	// Including git, oci, local.
	Source *downloader.Source
	// LocalPath is the local path to download the package.
	LocalPath string
}

type PullOption func(*PullOptions) error

func WithPullSource(source *downloader.Source) PullOption {
	return func(opts *PullOptions) error {
		if source == nil {
			return errors.New("source cannot be nil")
		}
		opts.Source = source
		return nil
	}
}

func WithLocalPath(path string) PullOption {
	return func(opts *PullOptions) error {
		opts.LocalPath = path
		return nil
	}
}

func NewPullOptions(opts ...PullOption) *PullOptions {
	do := &PullOptions{}
	for _, opt := range opts {
		opt(do)
	}
	return do
}

func (c *KpmClient) Pull(options ...PullOption) (*pkg.KclPkg, error) {
	opts := &PullOptions{}
	for _, option := range options {
		if err := option(opts); err != nil {
			return nil, err
		}
	}

	sourceFilePath, err := opts.Source.ToFilePath()
	if err != nil {
		return nil, err
	}

	sourceStr, err := opts.Source.ToString()
	if err != nil {
		return nil, err
	}
	reporter.ReportMsgTo(
		fmt.Sprintf("start to pull %s", sourceStr),
		c.GetLogWriter(),
	)

	kPkg, err := c.downloadPkg(
		// The package pulled will be stored in the 'opts.LocalPath/sourceFilePath'
		// 'opts.LocalPath' is the local path input by the user.
		// 'sourceFilePath' is generated by the source.
		// For example,
		// kcl package from 'https://github.com/kcl-lang/kcl' will be stored in '$LOCAL_PATH/git/github.com/kcl-lang/kcl'
		// kcl package from 'oci://ghcr.io/kcl-lang/kcl' will be stored in '$LOCAL_PATH/oci/ghcr.io/kcl-lang/kcl'
		downloader.WithLocalPath(filepath.Join(opts.LocalPath, sourceFilePath)),
		downloader.WithSource(*opts.Source),
	)

	if err != nil {
		return nil, err
	}

	reporter.ReportMsgTo(
		fmt.Sprintf("pulled %s %s successfully", kPkg.GetPkgName(), kPkg.GetPkgVersion()),
		c.GetLogWriter(),
	)
	return kPkg, nil
}
